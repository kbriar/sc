#!pip install pulp
import pulp
import pandas as pd

# ------------------------------------------------------------------------------
# 1) Half-hour time slots (0..47 = 00:00..23:30) and the 'Required' coverage
# ------------------------------------------------------------------------------
time_labels = []
for t in range(48):
    hour = t // 2
    minute = (t % 2)*30
    time_labels.append(f"{hour:02d}:{minute:02d}")

required = [
    24,19,16,16,18,15,12, 8,10,11, 7, 4,   # 00:00..05:30
    18,14, 7, 8, 9, 9,13,11, 9,11,13,14,   # 06:00..11:30
    16,15,16,16,23,23,20,14,17,17,18,20,   # 12:00..17:30
    24,23,22,21,16,19,16,16,21,21,21,19    # 18:00..23:30
]
assert len(required) == 48

# ------------------------------------------------------------------------------
# 2) Shifts, each with a single integer variable x_s for the entire shift
#    SHIFT 1 = 06:00..15:00
#    SHIFT 2 = 10:00..19:00
#    SHIFT 3 = 14:00..23:00
#    SHIFT 4 = 20:00..05:00 (wraps)
#    SHIFT 5 = 23:00..08:00 (wraps)
# ------------------------------------------------------------------------------
shifts = {
    1: (6, 15),
    2: (10,19),
    3: (14,23),
    4: (20, 5),
    5: (23, 8),
}

def in_interval_mod24(x, start, end):
    """Return True if x mod 24 is in [start, end) mod 24 (handles midnight wrap)."""
    x_mod = x % 24
    s_mod = start % 24
    e_mod = end % 24
    if s_mod < e_mod:
        return s_mod <= x_mod < e_mod
    else:
        # wrap
        return (x_mod >= s_mod) or (x_mod < e_mod)

def shift_covers_slot(shift_start, shift_end, slot_index):
    """Check if shift covers midpoint of half-hour slot_index."""
    midpoint = slot_index*0.5 + 0.25
    return in_interval_mod24(midpoint, shift_start, shift_end)

# For each timeslot t, find which shifts cover it
cover_list = []
for t in range(48):
    covering = []
    for sid, (st, en) in shifts.items():
        if shift_covers_slot(st, en, t):
            covering.append(sid)
    cover_list.append(covering)

# ------------------------------------------------------------------------------
# 3) Build an integer LP:
#    x[s] = number of staff on shift s (constant throughout its span).
#    sum_{s in covering(t)} x[s] <= required[t].
#    Maximize total coverage = sum_{t} sum_{s in covering(t)} x[s].
# ------------------------------------------------------------------------------
prob = pulp.LpProblem("MaxCoverage_NoExceed", pulp.LpMaximize)

# Decision variables: integer staff count per shift
x = {
    s: pulp.LpVariable(f"x_shift{s}", lowBound=0, cat=pulp.LpInteger)
    for s in shifts
}

# Objective: maximize total coverage
# sum_{t=0..47} sum_{s in cover_list[t]} x[s]
prob += pulp.lpSum(
    pulp.lpSum(x[s] for s in cover_list[t]) 
    for t in range(48)
), "MaximizeTotalCoverage"

# Constraints: coverage in each timeslot <= required[t]
for t in range(48):
    if len(cover_list[t]) == 0:
        # No shift covers t. If required[t] is positive => can't fill => no problem
        # There's no staff anyway. 
        # If we want a strict "cannot exceed"? 0 <= required[t] is trivially satisfied.
        continue
    prob += pulp.lpSum(x[s] for s in cover_list[t]) <= required[t], f"NotExceed_{t}"

# ------------------------------------------------------------------------------
# 4) Solve
# ------------------------------------------------------------------------------
prob.solve(pulp.PULP_CBC_CMD(msg=0))
print("Solver status:", pulp.LpStatus[prob.status])

if pulp.LpStatus[prob.status] == "Optimal":
    # Get integer results for each shift
    sol = {s: int(pulp.value(x[s]) or 0) for s in shifts}
    print("\nOptimal Staff on Each Shift (No Exceed):")
    for s_id in sorted(sol.keys()):
        print(f"  Shift {s_id}: {sol[s_id]}")

    # Build coverage table
    table_rows = []
    for t in range(48):
        coverage_values = []
        for s_id in sorted(shifts.keys()):
            coverage_values.append(sol[s_id] if s_id in cover_list[t] else 0)
        total_cov = sum(coverage_values)
        row = {
            "Time": time_labels[t],
            "Shift1": coverage_values[0],
            "Shift2": coverage_values[1],
            "Shift3": coverage_values[2],
            "Shift4": coverage_values[3],
            "Shift5": coverage_values[4],
            "Total Coverage": total_cov,
            "Required": required[t]
        }
        table_rows.append(row)

    df = pd.DataFrame(table_rows)
    print("\nResult Table:")
    print(df.to_string(index=False))

else:
    print("No feasible solution found (or unbounded).")
